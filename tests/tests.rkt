#lang racket
(require "../src/arithmetic.rkt")
(require "../src/trig.rkt")

(define (test lists)
  (for ([i lists])
    (test_set i)))

(define (test_set set)
  (begin
  (run_test (list-ref set 0) (list-ref set 1) q+)
  (run_test (list-ref set 0) (list-ref set 2) q-)
  (run_test (list-ref set 0) (list-ref set 3) q*)
  (run_test (list-ref set 0) (list-ref set 4) q/)
  ))
  
(define (run_test qs q3 operation)
  (let ([result (operation qs)])
  (unless (q= (list result q3))
      (display (format "Using ~a on quats: ~a Program got: ~a Correct answer is: ~a\n" operation qs  result q3)))))

(define test_pairs 
                  ;      q1           q2             +            -           *            /
             '( ;( ((0  0  0  0) (0  0  0  0)) (0  0  0  0) (0  0  0  0) (0  0  0  0) (0  0  0  0))
           
                ( ((0  0  0  0) (0  0  0  1)) (0  0  0  1) (0  0  0 -1) (0  0  0  0) (0  0  0  0))
                ( ((0  0  0  0) (0  0  1  0)) (0  0  1  0) (0  0 -1  0) (0  0  0  0) (0  0  0  0))
                ( ((0  0  0  0) (0  1  0  0)) (0  1  0  0) (0 -1  0  0) (0  0  0  0) (0  0  0  0))
                ( ((0  0  0  0) (1  0  0  0)) (1  0  0  0) (-1 0  0  0) (0  0  0  0) (0  0  0  0))
           
                ( ((0  0  0  1) (0  0  0  1)) (0  0  0  2) (0  0  0  0) (-1 0  0  0) (1  0  0  0))
                ( ((0  0  0  1) (0  0  1  0)) (0  0  1  1) (0  0 -1  1) (0 -1  0  0) (0  1  0  0))
                ( ((0  0  0  1) (0  1  0  0)) (0  1  0  1) (0 -1  0  1) (0  0  1  0) (0  0 -1  0))
                ( ((0  0  0  1) (1  0  0  0)) (1  0  0  1) (-1 0  0  1) (0  0  0  1) (0  0  0  1))
                
                ( ((0  0  1  0) (0  0  0  1)) (0  0  1  1) (0  0  1 -1) (0  1  0  0) (0 -1  0  0))
                ( ((0  0  1  0) (0  0  1  0)) (0  0  2  0) (0  0  0  0) (-1 0  0  0) (1  0  0  0))
                ( ((0  0  1  0) (0  1  0  0)) (0  1  1  0) (0  -1 1  0) (0  0  0 -1) (0  0  0  1))
                ( ((0  0  1  0) (1  0  0  0)) (1  0  1  0) (-1 0  1  0) (0  0  1  0) (0  0  1  0))
                
                ( ((0  1  0  0) (0  0  0  1)) (0  1  0  1) (0  1  0 -1) (0  0 -1  0) (0  0  1  0))
                ( ((0  1  0  0) (0  0  1  0)) (0  1  1  0) (0  1 -1  0) (0  0  0  1) (0  0  0 -1))
                ( ((0  1  0  0) (0  1  0  0)) (0  2  0  0) (0  0  0  0) (-1 0  0  0) (1  0  0  0))
                ( ((0  1  0  0) (1  0  0  0)) (1  1  0  0) (-1 1  0  0) (0  1  0  0) (0  1  0  0))
                
                ( ((1  0  0  0) (0  0  0  1)) (1  0  0  1) (1  0  0 -1) (0  0  0  1) (0  0  0 -1))
                ( ((1  0  0  0) (0  0  1  0)) (1  0  1  0) (1  0 -1  0) (0  0  1  0) (0  0 -1  0))
                ( ((1  0  0  0) (0  1  0  0)) (1  1  0  0) (1 -1  0  0) (0  1  0  0) (0 -1  0  0))
                ( ((1  0  0  0) (1  0  0  0)) (2  0  0  0) (0  0  0  0) (1  0  0  0) (1  0  0  0))
                
                ( ((1  2  3  4) (1  2  3  4)) (2  4  6  8) (0  0  0  0) (-28 4  6  8) (1  0  0  0))
                
                
                ))

(define test_singles
                  ;    q1           qlog                 qsin         qcos
             '(
               ( ((0  0  0  1)) (0  0  0  1.5708) (0  0  0  1.1752) (1.5431  0  0  0))
               ( ((0  0  1  0)) (0  0  1.5708  0) (0  0  1.1752  0) (1.5431  0  0  0))
               ( ((0  1  0  0)) (0  1.5708  0  0) (0  1.1752  0  0) (1.5431  0  0  0))
               ( ((1  0  0  0)) (0  0  0  0) (0.84147  0  0  0) (0.5403  0  0  0))))

           